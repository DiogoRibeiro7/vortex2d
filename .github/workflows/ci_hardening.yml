
name: ci-hardening

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  lint-type:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: snok/install-poetry@v1
      - name: Install deps
        run: |
          poetry install --with dev || poetry install
      - name: Ruff (format gate)
        run: |
          poetry run ruff format --check
          poetry run ruff check .
      - name: mypy (strict)
        run: poetry run mypy --strict src

  precommit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
      - name: Run pre-commit on all files
        run: pre-commit run --all-files

  perf-smoke:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        backend: [direct]
        numba: [false, true]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: snok/install-poetry@v1
      - name: Install deps (with benchmark & numba optional)
        run: |
          poetry install --with dev || poetry install
          poetry run python - <<'PY'
import sys
print("Python:", sys.version)
PY
          # Try to install numba if requested; ignore failure on unsupported platforms
          if [ "${{ matrix.numba }}" = "true" ]; then
            poetry run python -m pip install numba || true
          fi
          poetry run python -m pip install pytest-benchmark
      - name: Run perf smoke (small N, few steps)
        env:
          NUMBA: ${{ matrix.numba }}
          BACKEND: ${{ matrix.backend }}
          BENCH: "1"
        run: |
          set -e
          # Re-enable benchmark plugin for smoke run
          sed -i 's/^benchmark_disable = true/benchmark_disable = false/' pytest.ini || true
          # Tiny in-tree benchmark using existing suite if present; else, fallback one-shot
          if [ -d benchmarks ]; then
            poetry run pytest benchmarks -k velocities-direct --benchmark-only --benchmark-min-time=0.01
          else
            cat > smoke_bench.py <<'PY'
from __future__ import annotations
import os, numpy as np, pytest
from vortex2d import VortexSystem2D, NumbaConfig, ChunkConfig

def test_smoke_bench(benchmark):
    rng = np.random.default_rng(0)
    N = 2000
    x = rng.uniform(-0.5, 0.5, size=(N,2))
    g = rng.normal(0,1,size=(N,)); g -= g.mean()
    use_numba = os.environ.get("NUMBA","false").lower() == "true"
    sys = VortexSystem2D(x, g, sigma=0.03, nu=0.0,
                         velocity_backend="direct",
                         numba_cfg=NumbaConfig(enabled=use_numba),
                         chunking=ChunkConfig(query_batch=10000))
    def run():
        sys.velocities(x)
    benchmark(run)
PY
            poetry run pytest smoke_bench.py --benchmark-only --benchmark-min-time=0.01
          fi
